# mysite_nginx.conf

# the upstream component nginx needs to connect to
upstream django {
    server unix:/tmp/figuresite.sock;
}

# cloudflare takes care of always https

## http://mydomain.com redirects to https://mydomain.com
#server {
# listen 80;
# listen [::]:80;
# server_name ero-one.moe;

# include /etc/nginx/snippets/letsencrypt.conf;

# location / {
#               return 301 https://ero-one.moe$request_uri;
# }
#}

## http://www.mydomain.com redirects to https://www.mydomain.com
#server {
# listen 80 default_server;
# listen [::]:80 default_server ipv6only=on;
# server_name www.ero-one.moe;

# include /etc/nginx/snippets/letsencrypt.conf;

# location / {
#               return 301 https://www.ero-one.moe$request_uri;
# }
#}

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

# configuration of the server
server {
    # server_name www.ero-one.moe;
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

        root /server/live/html;
        index index.html;
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/plain application/javascript application/x-javascript text/javascript text/css text/xml application/xml;
        gzip_disable "MSIE [1-6]\.";

    #ssl_certificate /etc/letsencrypt/live/www.ero-one.moe/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/www.ero-one.moe/privkey.pem;
    #ssl_trusted_certificate /etc/letsencrypt/live/www.ero-one.moe/fullchain.pem;
    #include /etc/nginx/snippets/ssl.conf;

	location ~^/((?!static|media).)*\.(gif|jpg|jpeg|png|css|woff|woff2|eot|svg|ttf)$ {
		gzip_static on;
		expires 5d;
		add_header Cache-Control public;
		add_header ETag "";
		access_log off;
    }

	location ~^/((?!static|media).)*\.(js)$ {
		gzip_static on;
		expires off;
		add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
		if_modified_since off;
		etag off;
		access_log off;
    }
	
    # Finally, send all non-media requests to the Django server.
   location /google8cf4d0280b86da00.html {
            return 200 "google-site-verification: google8cf4d0280b86da00.html";
    }
    location ~^/(djadmin|api|ckeditor) {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                # we don't want nginx trying to do something clever with
                # redirects, we set the Host: header above already.
                proxy_redirect off;
                proxy_pass http://unix:/tmp/figuresite.sock;
    }
        location / {
                expires -1;
                add_header Pragma "no-cache";
                add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
                try_files $uri @prerender;
        }
    location @prerender {
        #proxy_set_header X-Prerender-Token YOUR_TOKEN;

        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|discordbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }

        if ($prerender = 1) {

            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            set $prerender "127.0.0.1:3000";
            rewrite .* /$scheme://127.0.0.1$request_uri? break;
            rewrite .* /$scheme://127.0.0.1$request_uri? break;
            proxy_pass http://$prerender;
        }
        if ($prerender = 0) {
            rewrite .* /index.html break;
        }
        }
    #include /etc/nginx/snippets/letsencrypt.conf;
}


server {
    # server_name www.ero-one.moe;
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

        root /server/live/html;
        index index.html;
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/plain application/javascript application/x-javascript text/javascript text/css text/xml application/xml;
        gzip_disable "MSIE [1-6]\.";
    #ssl_certificate /etc/letsencrypt/live/www.ero-one.moe/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/www.ero-one.moe/privkey.pem;
    #ssl_trusted_certificate /etc/letsencrypt/live/www.ero-one.moe/fullchain.pem;
       location ~^/((?!static|media).)*\.(gif|jpg|jpeg|png|css|woff|woff2|eot|svg|ttf)$ {
                gzip_static on;
                expires 5d;
                add_header Cache-Control public;
                add_header ETag "";
        }

	location ~^/((?!static|media).)*\.(js)$ {
		gzip_static on;
		expires off;
		add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
		if_modified_since off;
		etag off;
		access_log off;
    }
    # Django media
    location /media  {
        alias /server/live/media;  # your Django project's media files - amend as required
                gzip_static on;
                expires 5d;
                add_header Cache-Control public;
                add_header ETag "";
                access_log off;
    }

    location /static {
                alias /server/live/static;
                #try_files /server/static/$uri tmp/static/$uri/ tmp/static2/$uri tmp/static2/$uri/;
                gzip_static on;
                expires 5d;
                add_header Cache-Control public;
                add_header ETag "";
                access_log off;
    }

   location /google8cf4d0280b86da00.html {
            return 200 "google-site-verification: google8cf4d0280b86da00.html";
    }

    # Finally, send all non-media requests to the Django server.
    location ~^/(djadmin|api|ckeditor) {
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                # we don't want nginx trying to do something clever with
                # redirects, we set the Host: header above already.
                proxy_redirect off;
                proxy_pass http://unix:/tmp/figuresite.sock;
    }
    location ~^/(ws) {
				proxy_http_version 1.1;
				proxy_set_header Upgrade $http_upgrade;
				proxy_set_header Connection $connection_upgrade;
                proxy_pass http://unix:/tmp/figuresite.sock;
    }
        location / {
                expires -1;
                add_header Pragma "no-cache";
                add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
                try_files $uri @prerender;
        }
    location @prerender {
        #proxy_set_header X-Prerender-Token YOUR_TOKEN;

        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|discordbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
            set $prerender 0;
        }
        if ($prerender = 1) {

            #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
            set $prerender "127.0.0.1:3000";
            rewrite .* /$scheme://127.0.0.1$request_uri? break;
            proxy_pass http://$prerender;
        }
        if ($prerender = 0) {
            rewrite .* /index.html break;
        }
        }
    #include /etc/nginx/snippets/letsencrypt.conf;

    server_name hobbyfiguras.moe *.hobbyfiguras.moe; # managed by Certbot

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/hobbyfiguras.moe/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/hobbyfiguras.moe/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot



}
server {
    if ($host = hobbyfiguras.moe) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host ~ ^[^.]+\.hobbyfiguras\.moe$) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80 ;
    listen [::]:80  ;
    server_name hobbyfiguras.moe *.hobbyfiguras.moe;
    return 404; # managed by Certbot




}




